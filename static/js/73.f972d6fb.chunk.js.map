{"version":3,"sources":["../node_modules/codemirror/addon/mode/multiplex.js","../node_modules/codemirror/mode/twig/twig.js"],"names":["CodeMirror","multiplexingMode","outer","others","Array","prototype","slice","call","arguments","indexOf","string","pattern","from","returnEnd","found","length","m","exec","index","startState","innerActive","inner","copyState","state","mode","token","stream","curInner","oldContent","close","sol","this","pos","parseDelimiters","match","delimStyle","innerToken","innerStyle","cutOff","Infinity","i","other","open","outerIndent","indent","possibleOuterIndent","Pass","outerToken","textAfter","line","blankLine","electricChars","innerMode","mod","defineMode","keywords","operator","sign","atom","number","RegExp","join","ch","peek","incomment","skipTo","eatWhile","skipToEnd","intag","instring","next","eat","tokenBase","config","parserConfig","twigInner","getMode","base","defineMIME"],"mappings":"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","file":"static/js/73.f972d6fb.chunk.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);else // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.multiplexingMode = function (outer\n  /*, others */\n  ) {\n    // Others should be {open, close, mode [, delimStyle] [, innerStyle]} objects\n    var others = Array.prototype.slice.call(arguments, 1);\n\n    function indexOf(string, pattern, from, returnEnd) {\n      if (typeof pattern == \"string\") {\n        var found = string.indexOf(pattern, from);\n        return returnEnd && found > -1 ? found + pattern.length : found;\n      }\n\n      var m = pattern.exec(from ? string.slice(from) : string);\n      return m ? m.index + from + (returnEnd ? m[0].length : 0) : -1;\n    }\n\n    return {\n      startState: function () {\n        return {\n          outer: CodeMirror.startState(outer),\n          innerActive: null,\n          inner: null\n        };\n      },\n      copyState: function (state) {\n        return {\n          outer: CodeMirror.copyState(outer, state.outer),\n          innerActive: state.innerActive,\n          inner: state.innerActive && CodeMirror.copyState(state.innerActive.mode, state.inner)\n        };\n      },\n      token: function (stream, state) {\n        if (!state.innerActive) {\n          var cutOff = Infinity,\n              oldContent = stream.string;\n\n          for (var i = 0; i < others.length; ++i) {\n            var other = others[i];\n            var found = indexOf(oldContent, other.open, stream.pos);\n\n            if (found == stream.pos) {\n              if (!other.parseDelimiters) stream.match(other.open);\n              state.innerActive = other; // Get the outer indent, making sure to handle CodeMirror.Pass\n\n              var outerIndent = 0;\n\n              if (outer.indent) {\n                var possibleOuterIndent = outer.indent(state.outer, \"\", \"\");\n                if (possibleOuterIndent !== CodeMirror.Pass) outerIndent = possibleOuterIndent;\n              }\n\n              state.inner = CodeMirror.startState(other.mode, outerIndent);\n              return other.delimStyle && other.delimStyle + \" \" + other.delimStyle + \"-open\";\n            } else if (found != -1 && found < cutOff) {\n              cutOff = found;\n            }\n          }\n\n          if (cutOff != Infinity) stream.string = oldContent.slice(0, cutOff);\n          var outerToken = outer.token(stream, state.outer);\n          if (cutOff != Infinity) stream.string = oldContent;\n          return outerToken;\n        } else {\n          var curInner = state.innerActive,\n              oldContent = stream.string;\n\n          if (!curInner.close && stream.sol()) {\n            state.innerActive = state.inner = null;\n            return this.token(stream, state);\n          }\n\n          var found = curInner.close ? indexOf(oldContent, curInner.close, stream.pos, curInner.parseDelimiters) : -1;\n\n          if (found == stream.pos && !curInner.parseDelimiters) {\n            stream.match(curInner.close);\n            state.innerActive = state.inner = null;\n            return curInner.delimStyle && curInner.delimStyle + \" \" + curInner.delimStyle + \"-close\";\n          }\n\n          if (found > -1) stream.string = oldContent.slice(0, found);\n          var innerToken = curInner.mode.token(stream, state.inner);\n          if (found > -1) stream.string = oldContent;\n          if (found == stream.pos && curInner.parseDelimiters) state.innerActive = state.inner = null;\n\n          if (curInner.innerStyle) {\n            if (innerToken) innerToken = innerToken + \" \" + curInner.innerStyle;else innerToken = curInner.innerStyle;\n          }\n\n          return innerToken;\n        }\n      },\n      indent: function (state, textAfter, line) {\n        var mode = state.innerActive ? state.innerActive.mode : outer;\n        if (!mode.indent) return CodeMirror.Pass;\n        return mode.indent(state.innerActive ? state.inner : state.outer, textAfter, line);\n      },\n      blankLine: function (state) {\n        var mode = state.innerActive ? state.innerActive.mode : outer;\n\n        if (mode.blankLine) {\n          mode.blankLine(state.innerActive ? state.inner : state.outer);\n        }\n\n        if (!state.innerActive) {\n          for (var i = 0; i < others.length; ++i) {\n            var other = others[i];\n\n            if (other.open === \"\\n\") {\n              state.innerActive = other;\n              state.inner = CodeMirror.startState(other.mode, mode.indent ? mode.indent(state.outer, \"\", \"\") : 0);\n            }\n          }\n        } else if (state.innerActive.close === \"\\n\") {\n          state.innerActive = state.inner = null;\n        }\n      },\n      electricChars: outer.electricChars,\n      innerMode: function (state) {\n        return state.inner ? {\n          state: state.inner,\n          mode: state.innerActive.mode\n        } : {\n          state: state.outer,\n          mode: outer\n        };\n      }\n    };\n  };\n});","// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"), require(\"../../addon/mode/multiplex\"));else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\", \"../../addon/mode/multiplex\"], mod);else // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"twig:inner\", function () {\n    var keywords = [\"and\", \"as\", \"autoescape\", \"endautoescape\", \"block\", \"do\", \"endblock\", \"else\", \"elseif\", \"extends\", \"for\", \"endfor\", \"embed\", \"endembed\", \"filter\", \"endfilter\", \"flush\", \"from\", \"if\", \"endif\", \"in\", \"is\", \"include\", \"import\", \"not\", \"or\", \"set\", \"spaceless\", \"endspaceless\", \"with\", \"endwith\", \"trans\", \"endtrans\", \"blocktrans\", \"endblocktrans\", \"macro\", \"endmacro\", \"use\", \"verbatim\", \"endverbatim\"],\n        operator = /^[+\\-*&%=<>!?|~^]/,\n        sign = /^[:\\[\\(\\{]/,\n        atom = [\"true\", \"false\", \"null\", \"empty\", \"defined\", \"divisibleby\", \"divisible by\", \"even\", \"odd\", \"iterable\", \"sameas\", \"same as\"],\n        number = /^(\\d[+\\-\\*\\/])?\\d+(\\.\\d+)?/;\n    keywords = new RegExp(\"((\" + keywords.join(\")|(\") + \"))\\\\b\");\n    atom = new RegExp(\"((\" + atom.join(\")|(\") + \"))\\\\b\");\n\n    function tokenBase(stream, state) {\n      var ch = stream.peek(); //Comment\n\n      if (state.incomment) {\n        if (!stream.skipTo(\"#}\")) {\n          stream.skipToEnd();\n        } else {\n          stream.eatWhile(/\\#|}/);\n          state.incomment = false;\n        }\n\n        return \"comment\"; //Tag\n      } else if (state.intag) {\n        //After operator\n        if (state.operator) {\n          state.operator = false;\n\n          if (stream.match(atom)) {\n            return \"atom\";\n          }\n\n          if (stream.match(number)) {\n            return \"number\";\n          }\n        } //After sign\n\n\n        if (state.sign) {\n          state.sign = false;\n\n          if (stream.match(atom)) {\n            return \"atom\";\n          }\n\n          if (stream.match(number)) {\n            return \"number\";\n          }\n        }\n\n        if (state.instring) {\n          if (ch == state.instring) {\n            state.instring = false;\n          }\n\n          stream.next();\n          return \"string\";\n        } else if (ch == \"'\" || ch == '\"') {\n          state.instring = ch;\n          stream.next();\n          return \"string\";\n        } else if (stream.match(state.intag + \"}\") || stream.eat(\"-\") && stream.match(state.intag + \"}\")) {\n          state.intag = false;\n          return \"tag\";\n        } else if (stream.match(operator)) {\n          state.operator = true;\n          return \"operator\";\n        } else if (stream.match(sign)) {\n          state.sign = true;\n        } else {\n          if (stream.eat(\" \") || stream.sol()) {\n            if (stream.match(keywords)) {\n              return \"keyword\";\n            }\n\n            if (stream.match(atom)) {\n              return \"atom\";\n            }\n\n            if (stream.match(number)) {\n              return \"number\";\n            }\n\n            if (stream.sol()) {\n              stream.next();\n            }\n          } else {\n            stream.next();\n          }\n        }\n\n        return \"variable\";\n      } else if (stream.eat(\"{\")) {\n        if (stream.eat(\"#\")) {\n          state.incomment = true;\n\n          if (!stream.skipTo(\"#}\")) {\n            stream.skipToEnd();\n          } else {\n            stream.eatWhile(/\\#|}/);\n            state.incomment = false;\n          }\n\n          return \"comment\"; //Open tag\n        } else if (ch = stream.eat(/\\{|%/)) {\n          //Cache close tag\n          state.intag = ch;\n\n          if (ch == \"{\") {\n            state.intag = \"}\";\n          }\n\n          stream.eat(\"-\");\n          return \"tag\";\n        }\n      }\n\n      stream.next();\n    }\n\n    ;\n    return {\n      startState: function () {\n        return {};\n      },\n      token: function (stream, state) {\n        return tokenBase(stream, state);\n      }\n    };\n  });\n  CodeMirror.defineMode(\"twig\", function (config, parserConfig) {\n    var twigInner = CodeMirror.getMode(config, \"twig:inner\");\n    if (!parserConfig || !parserConfig.base) return twigInner;\n    return CodeMirror.multiplexingMode(CodeMirror.getMode(config, parserConfig.base), {\n      open: /\\{[{#%]/,\n      close: /[}#%]\\}/,\n      mode: twigInner,\n      parseDelimiters: true\n    });\n  });\n  CodeMirror.defineMIME(\"text/x-twig\", \"twig\");\n});"],"sourceRoot":""}